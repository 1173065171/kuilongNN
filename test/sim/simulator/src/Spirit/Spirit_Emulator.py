# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Spirit_Emulator
else:
    import _Spirit_Emulator

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class Spirit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Spirit_Emulator.Spirit_swiginit(self, _Spirit_Emulator.new_Spirit())
    __swig_destroy__ = _Spirit_Emulator.delete_Spirit

    def emulator_init(self):
        return _Spirit_Emulator.Spirit_emulator_init(self)

    def emulate(self):
        return _Spirit_Emulator.Spirit_emulate(self)

    def get_current_pc(self):
        return _Spirit_Emulator.Spirit_get_current_pc(self)

    def get_csr(self, addr):
        return _Spirit_Emulator.Spirit_get_csr(self, addr)

    def set_instr(self, data_msb, data_lsb):
        return _Spirit_Emulator.Spirit_set_instr(self, data_msb, data_lsb)

    def get_peripherals_bus_enable(self):
        return _Spirit_Emulator.Spirit_get_peripherals_bus_enable(self)

    def get_peripherals_bus_wstrb(self):
        return _Spirit_Emulator.Spirit_get_peripherals_bus_wstrb(self)

    def get_peripherals_bus_addr(self):
        return _Spirit_Emulator.Spirit_get_peripherals_bus_addr(self)

    def get_peripherals_bus_wdata(self):
        return _Spirit_Emulator.Spirit_get_peripherals_bus_wdata(self)

    def get_peripherals_bus_rdata(self):
        return _Spirit_Emulator.Spirit_get_peripherals_bus_rdata(self)

    def set_peripherals_bus_enable(self, data):
        return _Spirit_Emulator.Spirit_set_peripherals_bus_enable(self, data)

    def set_peripherals_bus_wstrb(self, data):
        return _Spirit_Emulator.Spirit_set_peripherals_bus_wstrb(self, data)

    def set_peripherals_bus_addr(self, data):
        return _Spirit_Emulator.Spirit_set_peripherals_bus_addr(self, data)

    def set_peripherals_bus_wdata(self, data):
        return _Spirit_Emulator.Spirit_set_peripherals_bus_wdata(self, data)

    def set_peripherals_bus_rdata(self, data):
        return _Spirit_Emulator.Spirit_set_peripherals_bus_rdata(self, data)

    def get_csr_bus_re(self):
        return _Spirit_Emulator.Spirit_get_csr_bus_re(self)

    def get_csr_bus_we(self):
        return _Spirit_Emulator.Spirit_get_csr_bus_we(self)

    def get_csr_bus_write_type(self):
        return _Spirit_Emulator.Spirit_get_csr_bus_write_type(self)

    def get_csr_bus_wstrb(self):
        return _Spirit_Emulator.Spirit_get_csr_bus_wstrb(self)

    def get_csr_bus_addr(self):
        return _Spirit_Emulator.Spirit_get_csr_bus_addr(self)

    def get_csr_bus_wdata1(self):
        return _Spirit_Emulator.Spirit_get_csr_bus_wdata1(self)

    def get_csr_bus_wdata2(self):
        return _Spirit_Emulator.Spirit_get_csr_bus_wdata2(self)

    def get_csr_bus_rdata(self):
        return _Spirit_Emulator.Spirit_get_csr_bus_rdata(self)

    def get_csr_bus_vestart(self):
        return _Spirit_Emulator.Spirit_get_csr_bus_vestart(self)

    def set_csr_bus_re(self, data):
        return _Spirit_Emulator.Spirit_set_csr_bus_re(self, data)

    def set_csr_bus_we(self, data):
        return _Spirit_Emulator.Spirit_set_csr_bus_we(self, data)

    def set_csr_bus_write_type(self, data):
        return _Spirit_Emulator.Spirit_set_csr_bus_write_type(self, data)

    def set_csr_bus_wstrb(self, data):
        return _Spirit_Emulator.Spirit_set_csr_bus_wstrb(self, data)

    def set_csr_bus_addr(self, data):
        return _Spirit_Emulator.Spirit_set_csr_bus_addr(self, data)

    def set_csr_bus_wdata1(self, data):
        return _Spirit_Emulator.Spirit_set_csr_bus_wdata1(self, data)

    def set_csr_bus_wdata2(self, data):
        return _Spirit_Emulator.Spirit_set_csr_bus_wdata2(self, data)

    def set_csr_bus_rdata(self, data):
        return _Spirit_Emulator.Spirit_set_csr_bus_rdata(self, data)

    def set_csr_bus_vestart(self, data):
        return _Spirit_Emulator.Spirit_set_csr_bus_vestart(self, data)
    INST_START_ADDR_INIT = property(_Spirit_Emulator.Spirit_INST_START_ADDR_INIT_get, _Spirit_Emulator.Spirit_INST_START_ADDR_INIT_set)
    GLOBAL_START_ADDR_INIT = property(_Spirit_Emulator.Spirit_GLOBAL_START_ADDR_INIT_get, _Spirit_Emulator.Spirit_GLOBAL_START_ADDR_INIT_set)
    STACK1_START_ADDR_INIT = property(_Spirit_Emulator.Spirit_STACK1_START_ADDR_INIT_get, _Spirit_Emulator.Spirit_STACK1_START_ADDR_INIT_set)
    STACK2_START_ADDR_INIT = property(_Spirit_Emulator.Spirit_STACK2_START_ADDR_INIT_get, _Spirit_Emulator.Spirit_STACK2_START_ADDR_INIT_set)
    UART_BASEADDR_INIT = property(_Spirit_Emulator.Spirit_UART_BASEADDR_INIT_get, _Spirit_Emulator.Spirit_UART_BASEADDR_INIT_set)
    verbose = property(_Spirit_Emulator.Spirit_verbose_get, _Spirit_Emulator.Spirit_verbose_set)
    trap = property(_Spirit_Emulator.Spirit_trap_get, _Spirit_Emulator.Spirit_trap_set)
    use_one_sram = property(_Spirit_Emulator.Spirit_use_one_sram_get, _Spirit_Emulator.Spirit_use_one_sram_set)
    peripherals_req = property(_Spirit_Emulator.Spirit_peripherals_req_get, _Spirit_Emulator.Spirit_peripherals_req_set)

# Register Spirit in _Spirit_Emulator:
_Spirit_Emulator.Spirit_swigregister(Spirit)
cvar = _Spirit_Emulator.cvar
REGNUM = cvar.REGNUM



