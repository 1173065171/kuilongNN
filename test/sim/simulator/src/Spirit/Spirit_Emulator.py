# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Spirit_Emulator')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Spirit_Emulator')
    _Spirit_Emulator = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Spirit_Emulator', [dirname(__file__)])
        except ImportError:
            import _Spirit_Emulator
            return _Spirit_Emulator
        try:
            _mod = imp.load_module('_Spirit_Emulator', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Spirit_Emulator = swig_import_helper()
    del swig_import_helper
else:
    import _Spirit_Emulator
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class Spirit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Spirit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Spirit, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _Spirit_Emulator.new_Spirit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Spirit_Emulator.delete_Spirit
    __del__ = lambda self: None

    def emulator_init(self):
        return _Spirit_Emulator.Spirit_emulator_init(self)

    def emulate(self):
        return _Spirit_Emulator.Spirit_emulate(self)

    def get_current_pc(self):
        return _Spirit_Emulator.Spirit_get_current_pc(self)

    def get_csr(self, addr):
        return _Spirit_Emulator.Spirit_get_csr(self, addr)

    def set_instr(self, data_msb, data_lsb):
        return _Spirit_Emulator.Spirit_set_instr(self, data_msb, data_lsb)

    def get_peripherals_bus_enable(self):
        return _Spirit_Emulator.Spirit_get_peripherals_bus_enable(self)

    def get_peripherals_bus_wstrb(self):
        return _Spirit_Emulator.Spirit_get_peripherals_bus_wstrb(self)

    def get_peripherals_bus_addr(self):
        return _Spirit_Emulator.Spirit_get_peripherals_bus_addr(self)

    def get_peripherals_bus_wdata(self):
        return _Spirit_Emulator.Spirit_get_peripherals_bus_wdata(self)

    def get_peripherals_bus_rdata(self):
        return _Spirit_Emulator.Spirit_get_peripherals_bus_rdata(self)

    def set_peripherals_bus_enable(self, data):
        return _Spirit_Emulator.Spirit_set_peripherals_bus_enable(self, data)

    def set_peripherals_bus_wstrb(self, data):
        return _Spirit_Emulator.Spirit_set_peripherals_bus_wstrb(self, data)

    def set_peripherals_bus_addr(self, data):
        return _Spirit_Emulator.Spirit_set_peripherals_bus_addr(self, data)

    def set_peripherals_bus_wdata(self, data):
        return _Spirit_Emulator.Spirit_set_peripherals_bus_wdata(self, data)

    def set_peripherals_bus_rdata(self, data):
        return _Spirit_Emulator.Spirit_set_peripherals_bus_rdata(self, data)

    def get_csr_bus_re(self):
        return _Spirit_Emulator.Spirit_get_csr_bus_re(self)

    def get_csr_bus_we(self):
        return _Spirit_Emulator.Spirit_get_csr_bus_we(self)

    def get_csr_bus_write_type(self):
        return _Spirit_Emulator.Spirit_get_csr_bus_write_type(self)

    def get_csr_bus_wstrb(self):
        return _Spirit_Emulator.Spirit_get_csr_bus_wstrb(self)

    def get_csr_bus_addr(self):
        return _Spirit_Emulator.Spirit_get_csr_bus_addr(self)

    def get_csr_bus_wdata1(self):
        return _Spirit_Emulator.Spirit_get_csr_bus_wdata1(self)

    def get_csr_bus_wdata2(self):
        return _Spirit_Emulator.Spirit_get_csr_bus_wdata2(self)

    def get_csr_bus_rdata(self):
        return _Spirit_Emulator.Spirit_get_csr_bus_rdata(self)

    def get_csr_bus_vestart(self):
        return _Spirit_Emulator.Spirit_get_csr_bus_vestart(self)

    def set_csr_bus_re(self, data):
        return _Spirit_Emulator.Spirit_set_csr_bus_re(self, data)

    def set_csr_bus_we(self, data):
        return _Spirit_Emulator.Spirit_set_csr_bus_we(self, data)

    def set_csr_bus_write_type(self, data):
        return _Spirit_Emulator.Spirit_set_csr_bus_write_type(self, data)

    def set_csr_bus_wstrb(self, data):
        return _Spirit_Emulator.Spirit_set_csr_bus_wstrb(self, data)

    def set_csr_bus_addr(self, data):
        return _Spirit_Emulator.Spirit_set_csr_bus_addr(self, data)

    def set_csr_bus_wdata1(self, data):
        return _Spirit_Emulator.Spirit_set_csr_bus_wdata1(self, data)

    def set_csr_bus_wdata2(self, data):
        return _Spirit_Emulator.Spirit_set_csr_bus_wdata2(self, data)

    def set_csr_bus_rdata(self, data):
        return _Spirit_Emulator.Spirit_set_csr_bus_rdata(self, data)

    def set_csr_bus_vestart(self, data):
        return _Spirit_Emulator.Spirit_set_csr_bus_vestart(self, data)
    __swig_setmethods__["INST_START_ADDR_INIT"] = _Spirit_Emulator.Spirit_INST_START_ADDR_INIT_set
    __swig_getmethods__["INST_START_ADDR_INIT"] = _Spirit_Emulator.Spirit_INST_START_ADDR_INIT_get
    if _newclass:
        INST_START_ADDR_INIT = _swig_property(_Spirit_Emulator.Spirit_INST_START_ADDR_INIT_get, _Spirit_Emulator.Spirit_INST_START_ADDR_INIT_set)
    __swig_setmethods__["GLOBAL_START_ADDR_INIT"] = _Spirit_Emulator.Spirit_GLOBAL_START_ADDR_INIT_set
    __swig_getmethods__["GLOBAL_START_ADDR_INIT"] = _Spirit_Emulator.Spirit_GLOBAL_START_ADDR_INIT_get
    if _newclass:
        GLOBAL_START_ADDR_INIT = _swig_property(_Spirit_Emulator.Spirit_GLOBAL_START_ADDR_INIT_get, _Spirit_Emulator.Spirit_GLOBAL_START_ADDR_INIT_set)
    __swig_setmethods__["STACK1_START_ADDR_INIT"] = _Spirit_Emulator.Spirit_STACK1_START_ADDR_INIT_set
    __swig_getmethods__["STACK1_START_ADDR_INIT"] = _Spirit_Emulator.Spirit_STACK1_START_ADDR_INIT_get
    if _newclass:
        STACK1_START_ADDR_INIT = _swig_property(_Spirit_Emulator.Spirit_STACK1_START_ADDR_INIT_get, _Spirit_Emulator.Spirit_STACK1_START_ADDR_INIT_set)
    __swig_setmethods__["STACK2_START_ADDR_INIT"] = _Spirit_Emulator.Spirit_STACK2_START_ADDR_INIT_set
    __swig_getmethods__["STACK2_START_ADDR_INIT"] = _Spirit_Emulator.Spirit_STACK2_START_ADDR_INIT_get
    if _newclass:
        STACK2_START_ADDR_INIT = _swig_property(_Spirit_Emulator.Spirit_STACK2_START_ADDR_INIT_get, _Spirit_Emulator.Spirit_STACK2_START_ADDR_INIT_set)
    __swig_setmethods__["UART_BASEADDR_INIT"] = _Spirit_Emulator.Spirit_UART_BASEADDR_INIT_set
    __swig_getmethods__["UART_BASEADDR_INIT"] = _Spirit_Emulator.Spirit_UART_BASEADDR_INIT_get
    if _newclass:
        UART_BASEADDR_INIT = _swig_property(_Spirit_Emulator.Spirit_UART_BASEADDR_INIT_get, _Spirit_Emulator.Spirit_UART_BASEADDR_INIT_set)
    __swig_setmethods__["verbose"] = _Spirit_Emulator.Spirit_verbose_set
    __swig_getmethods__["verbose"] = _Spirit_Emulator.Spirit_verbose_get
    if _newclass:
        verbose = _swig_property(_Spirit_Emulator.Spirit_verbose_get, _Spirit_Emulator.Spirit_verbose_set)
    __swig_setmethods__["trap"] = _Spirit_Emulator.Spirit_trap_set
    __swig_getmethods__["trap"] = _Spirit_Emulator.Spirit_trap_get
    if _newclass:
        trap = _swig_property(_Spirit_Emulator.Spirit_trap_get, _Spirit_Emulator.Spirit_trap_set)
    __swig_setmethods__["use_one_sram"] = _Spirit_Emulator.Spirit_use_one_sram_set
    __swig_getmethods__["use_one_sram"] = _Spirit_Emulator.Spirit_use_one_sram_get
    if _newclass:
        use_one_sram = _swig_property(_Spirit_Emulator.Spirit_use_one_sram_get, _Spirit_Emulator.Spirit_use_one_sram_set)
    __swig_setmethods__["peripherals_req"] = _Spirit_Emulator.Spirit_peripherals_req_set
    __swig_getmethods__["peripherals_req"] = _Spirit_Emulator.Spirit_peripherals_req_get
    if _newclass:
        peripherals_req = _swig_property(_Spirit_Emulator.Spirit_peripherals_req_get, _Spirit_Emulator.Spirit_peripherals_req_set)
Spirit_swigregister = _Spirit_Emulator.Spirit_swigregister
Spirit_swigregister(Spirit)
cvar = _Spirit_Emulator.cvar
REGNUM = cvar.REGNUM

# This file is compatible with both classic and new-style classes.


