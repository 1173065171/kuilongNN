# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _UART_Emulator
else:
    import _UART_Emulator

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class Device(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _UART_Emulator.Device_swiginit(self, _UART_Emulator.new_Device())
    __swig_destroy__ = _UART_Emulator.delete_Device

    def init(self):
        return _UART_Emulator.Device_init(self)

    def run(self):
        return _UART_Emulator.Device_run(self)

    def get_peripherals_bus_enable(self):
        return _UART_Emulator.Device_get_peripherals_bus_enable(self)

    def get_peripherals_bus_wstrb(self):
        return _UART_Emulator.Device_get_peripherals_bus_wstrb(self)

    def get_peripherals_bus_addr(self):
        return _UART_Emulator.Device_get_peripherals_bus_addr(self)

    def get_peripherals_bus_wdata(self):
        return _UART_Emulator.Device_get_peripherals_bus_wdata(self)

    def get_peripherals_bus_rdata(self):
        return _UART_Emulator.Device_get_peripherals_bus_rdata(self)

    def set_peripherals_bus_enable(self, data):
        return _UART_Emulator.Device_set_peripherals_bus_enable(self, data)

    def set_peripherals_bus_wstrb(self, data):
        return _UART_Emulator.Device_set_peripherals_bus_wstrb(self, data)

    def set_peripherals_bus_addr(self, data):
        return _UART_Emulator.Device_set_peripherals_bus_addr(self, data)

    def set_peripherals_bus_wdata(self, data):
        return _UART_Emulator.Device_set_peripherals_bus_wdata(self, data)

    def set_peripherals_bus_rdata(self, data):
        return _UART_Emulator.Device_set_peripherals_bus_rdata(self, data)

    def get_csr_bus_re(self):
        return _UART_Emulator.Device_get_csr_bus_re(self)

    def get_csr_bus_we(self):
        return _UART_Emulator.Device_get_csr_bus_we(self)

    def get_csr_bus_write_type(self):
        return _UART_Emulator.Device_get_csr_bus_write_type(self)

    def get_csr_bus_wstrb(self):
        return _UART_Emulator.Device_get_csr_bus_wstrb(self)

    def get_csr_bus_addr(self):
        return _UART_Emulator.Device_get_csr_bus_addr(self)

    def get_csr_bus_wdata1(self):
        return _UART_Emulator.Device_get_csr_bus_wdata1(self)

    def get_csr_bus_wdata2(self):
        return _UART_Emulator.Device_get_csr_bus_wdata2(self)

    def get_csr_bus_rdata(self):
        return _UART_Emulator.Device_get_csr_bus_rdata(self)

    def get_csr_bus_vestart(self):
        return _UART_Emulator.Device_get_csr_bus_vestart(self)

    def set_csr_bus_re(self, data):
        return _UART_Emulator.Device_set_csr_bus_re(self, data)

    def set_csr_bus_we(self, data):
        return _UART_Emulator.Device_set_csr_bus_we(self, data)

    def set_csr_bus_write_type(self, data):
        return _UART_Emulator.Device_set_csr_bus_write_type(self, data)

    def set_csr_bus_wstrb(self, data):
        return _UART_Emulator.Device_set_csr_bus_wstrb(self, data)

    def set_csr_bus_addr(self, data):
        return _UART_Emulator.Device_set_csr_bus_addr(self, data)

    def set_csr_bus_wdata1(self, data):
        return _UART_Emulator.Device_set_csr_bus_wdata1(self, data)

    def set_csr_bus_wdata2(self, data):
        return _UART_Emulator.Device_set_csr_bus_wdata2(self, data)

    def set_csr_bus_rdata(self, data):
        return _UART_Emulator.Device_set_csr_bus_rdata(self, data)

    def set_csr_bus_vestart(self, data):
        return _UART_Emulator.Device_set_csr_bus_vestart(self, data)
    BASE_ADDRESS = property(_UART_Emulator.Device_BASE_ADDRESS_get, _UART_Emulator.Device_BASE_ADDRESS_set)

# Register Device in _UART_Emulator:
_UART_Emulator.Device_swigregister(Device)

class UART(Device):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _UART_Emulator.UART_swiginit(self, _UART_Emulator.new_UART())
    __swig_destroy__ = _UART_Emulator.delete_UART

    def init(self):
        return _UART_Emulator.UART_init(self)

    def run(self):
        return _UART_Emulator.UART_run(self)

    def set_file_name(self, file_name):
        return _UART_Emulator.UART_set_file_name(self, file_name)

    def clean(self):
        return _UART_Emulator.UART_clean(self)

# Register UART in _UART_Emulator:
_UART_Emulator.UART_swigregister(UART)



