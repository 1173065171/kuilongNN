# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_UART_Emulator')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_UART_Emulator')
    _UART_Emulator = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_UART_Emulator', [dirname(__file__)])
        except ImportError:
            import _UART_Emulator
            return _UART_Emulator
        try:
            _mod = imp.load_module('_UART_Emulator', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _UART_Emulator = swig_import_helper()
    del swig_import_helper
else:
    import _UART_Emulator
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class Device(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Device, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Device, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _UART_Emulator.new_Device()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _UART_Emulator.delete_Device
    __del__ = lambda self: None

    def init(self):
        return _UART_Emulator.Device_init(self)

    def run(self):
        return _UART_Emulator.Device_run(self)

    def get_peripherals_bus_enable(self):
        return _UART_Emulator.Device_get_peripherals_bus_enable(self)

    def get_peripherals_bus_wstrb(self):
        return _UART_Emulator.Device_get_peripherals_bus_wstrb(self)

    def get_peripherals_bus_addr(self):
        return _UART_Emulator.Device_get_peripherals_bus_addr(self)

    def get_peripherals_bus_wdata(self):
        return _UART_Emulator.Device_get_peripherals_bus_wdata(self)

    def get_peripherals_bus_rdata(self):
        return _UART_Emulator.Device_get_peripherals_bus_rdata(self)

    def set_peripherals_bus_enable(self, data):
        return _UART_Emulator.Device_set_peripherals_bus_enable(self, data)

    def set_peripherals_bus_wstrb(self, data):
        return _UART_Emulator.Device_set_peripherals_bus_wstrb(self, data)

    def set_peripherals_bus_addr(self, data):
        return _UART_Emulator.Device_set_peripherals_bus_addr(self, data)

    def set_peripherals_bus_wdata(self, data):
        return _UART_Emulator.Device_set_peripherals_bus_wdata(self, data)

    def set_peripherals_bus_rdata(self, data):
        return _UART_Emulator.Device_set_peripherals_bus_rdata(self, data)

    def get_csr_bus_re(self):
        return _UART_Emulator.Device_get_csr_bus_re(self)

    def get_csr_bus_we(self):
        return _UART_Emulator.Device_get_csr_bus_we(self)

    def get_csr_bus_write_type(self):
        return _UART_Emulator.Device_get_csr_bus_write_type(self)

    def get_csr_bus_wstrb(self):
        return _UART_Emulator.Device_get_csr_bus_wstrb(self)

    def get_csr_bus_addr(self):
        return _UART_Emulator.Device_get_csr_bus_addr(self)

    def get_csr_bus_wdata1(self):
        return _UART_Emulator.Device_get_csr_bus_wdata1(self)

    def get_csr_bus_wdata2(self):
        return _UART_Emulator.Device_get_csr_bus_wdata2(self)

    def get_csr_bus_rdata(self):
        return _UART_Emulator.Device_get_csr_bus_rdata(self)

    def get_csr_bus_vestart(self):
        return _UART_Emulator.Device_get_csr_bus_vestart(self)

    def set_csr_bus_re(self, data):
        return _UART_Emulator.Device_set_csr_bus_re(self, data)

    def set_csr_bus_we(self, data):
        return _UART_Emulator.Device_set_csr_bus_we(self, data)

    def set_csr_bus_write_type(self, data):
        return _UART_Emulator.Device_set_csr_bus_write_type(self, data)

    def set_csr_bus_wstrb(self, data):
        return _UART_Emulator.Device_set_csr_bus_wstrb(self, data)

    def set_csr_bus_addr(self, data):
        return _UART_Emulator.Device_set_csr_bus_addr(self, data)

    def set_csr_bus_wdata1(self, data):
        return _UART_Emulator.Device_set_csr_bus_wdata1(self, data)

    def set_csr_bus_wdata2(self, data):
        return _UART_Emulator.Device_set_csr_bus_wdata2(self, data)

    def set_csr_bus_rdata(self, data):
        return _UART_Emulator.Device_set_csr_bus_rdata(self, data)

    def set_csr_bus_vestart(self, data):
        return _UART_Emulator.Device_set_csr_bus_vestart(self, data)
    __swig_setmethods__["BASE_ADDRESS"] = _UART_Emulator.Device_BASE_ADDRESS_set
    __swig_getmethods__["BASE_ADDRESS"] = _UART_Emulator.Device_BASE_ADDRESS_get
    if _newclass:
        BASE_ADDRESS = _swig_property(_UART_Emulator.Device_BASE_ADDRESS_get, _UART_Emulator.Device_BASE_ADDRESS_set)
Device_swigregister = _UART_Emulator.Device_swigregister
Device_swigregister(Device)

class UART(Device):
    __swig_setmethods__ = {}
    for _s in [Device]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UART, name, value)
    __swig_getmethods__ = {}
    for _s in [Device]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UART, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _UART_Emulator.new_UART()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _UART_Emulator.delete_UART
    __del__ = lambda self: None

    def init(self):
        return _UART_Emulator.UART_init(self)

    def run(self):
        return _UART_Emulator.UART_run(self)

    def set_file_name(self, file_name):
        return _UART_Emulator.UART_set_file_name(self, file_name)

    def clean(self):
        return _UART_Emulator.UART_clean(self)
UART_swigregister = _UART_Emulator.UART_swigregister
UART_swigregister(UART)

# This file is compatible with both classic and new-style classes.


