# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_VEU_Emulator')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_VEU_Emulator')
    _VEU_Emulator = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_VEU_Emulator', [dirname(__file__)])
        except ImportError:
            import _VEU_Emulator
            return _VEU_Emulator
        try:
            _mod = imp.load_module('_VEU_Emulator', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _VEU_Emulator = swig_import_helper()
    del swig_import_helper
else:
    import _VEU_Emulator
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class Device(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Device, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Device, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _VEU_Emulator.new_Device()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VEU_Emulator.delete_Device
    __del__ = lambda self: None

    def init(self):
        return _VEU_Emulator.Device_init(self)

    def run(self):
        return _VEU_Emulator.Device_run(self)

    def get_peripherals_bus_enable(self):
        return _VEU_Emulator.Device_get_peripherals_bus_enable(self)

    def get_peripherals_bus_wstrb(self):
        return _VEU_Emulator.Device_get_peripherals_bus_wstrb(self)

    def get_peripherals_bus_addr(self):
        return _VEU_Emulator.Device_get_peripherals_bus_addr(self)

    def get_peripherals_bus_wdata(self):
        return _VEU_Emulator.Device_get_peripherals_bus_wdata(self)

    def get_peripherals_bus_rdata(self):
        return _VEU_Emulator.Device_get_peripherals_bus_rdata(self)

    def set_peripherals_bus_enable(self, data):
        return _VEU_Emulator.Device_set_peripherals_bus_enable(self, data)

    def set_peripherals_bus_wstrb(self, data):
        return _VEU_Emulator.Device_set_peripherals_bus_wstrb(self, data)

    def set_peripherals_bus_addr(self, data):
        return _VEU_Emulator.Device_set_peripherals_bus_addr(self, data)

    def set_peripherals_bus_wdata(self, data):
        return _VEU_Emulator.Device_set_peripherals_bus_wdata(self, data)

    def set_peripherals_bus_rdata(self, data):
        return _VEU_Emulator.Device_set_peripherals_bus_rdata(self, data)

    def get_csr_bus_re(self):
        return _VEU_Emulator.Device_get_csr_bus_re(self)

    def get_csr_bus_we(self):
        return _VEU_Emulator.Device_get_csr_bus_we(self)

    def get_csr_bus_write_type(self):
        return _VEU_Emulator.Device_get_csr_bus_write_type(self)

    def get_csr_bus_wstrb(self):
        return _VEU_Emulator.Device_get_csr_bus_wstrb(self)

    def get_csr_bus_addr(self):
        return _VEU_Emulator.Device_get_csr_bus_addr(self)

    def get_csr_bus_wdata1(self):
        return _VEU_Emulator.Device_get_csr_bus_wdata1(self)

    def get_csr_bus_wdata2(self):
        return _VEU_Emulator.Device_get_csr_bus_wdata2(self)

    def get_csr_bus_rdata(self):
        return _VEU_Emulator.Device_get_csr_bus_rdata(self)

    def get_csr_bus_vestart(self):
        return _VEU_Emulator.Device_get_csr_bus_vestart(self)

    def set_csr_bus_re(self, data):
        return _VEU_Emulator.Device_set_csr_bus_re(self, data)

    def set_csr_bus_we(self, data):
        return _VEU_Emulator.Device_set_csr_bus_we(self, data)

    def set_csr_bus_write_type(self, data):
        return _VEU_Emulator.Device_set_csr_bus_write_type(self, data)

    def set_csr_bus_wstrb(self, data):
        return _VEU_Emulator.Device_set_csr_bus_wstrb(self, data)

    def set_csr_bus_addr(self, data):
        return _VEU_Emulator.Device_set_csr_bus_addr(self, data)

    def set_csr_bus_wdata1(self, data):
        return _VEU_Emulator.Device_set_csr_bus_wdata1(self, data)

    def set_csr_bus_wdata2(self, data):
        return _VEU_Emulator.Device_set_csr_bus_wdata2(self, data)

    def set_csr_bus_rdata(self, data):
        return _VEU_Emulator.Device_set_csr_bus_rdata(self, data)

    def set_csr_bus_vestart(self, data):
        return _VEU_Emulator.Device_set_csr_bus_vestart(self, data)
    __swig_setmethods__["BASE_ADDRESS"] = _VEU_Emulator.Device_BASE_ADDRESS_set
    __swig_getmethods__["BASE_ADDRESS"] = _VEU_Emulator.Device_BASE_ADDRESS_get
    if _newclass:
        BASE_ADDRESS = _swig_property(_VEU_Emulator.Device_BASE_ADDRESS_get, _VEU_Emulator.Device_BASE_ADDRESS_set)
Device_swigregister = _VEU_Emulator.Device_swigregister
Device_swigregister(Device)

class VEU(Device):
    __swig_setmethods__ = {}
    for _s in [Device]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VEU, name, value)
    __swig_getmethods__ = {}
    for _s in [Device]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VEU, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _VEU_Emulator.new_VEU()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VEU_Emulator.delete_VEU
    __del__ = lambda self: None

    def init(self):
        return _VEU_Emulator.VEU_init(self)

    def run(self):
        return _VEU_Emulator.VEU_run(self)

    def update_csr(self):
        return _VEU_Emulator.VEU_update_csr(self)

    def update_buffer1(self, bank0, bank1, bank2, bank3):
        return _VEU_Emulator.VEU_update_buffer1(self, bank0, bank1, bank2, bank3)

    def update_buffer2(self, bank0, bank1, bank2, bank3):
        return _VEU_Emulator.VEU_update_buffer2(self, bank0, bank1, bank2, bank3)

    def update_output_buffer(self, bank0, bank1, bank2, bank3):
        return _VEU_Emulator.VEU_update_output_buffer(self, bank0, bank1, bank2, bank3)

    def read_output_buffer(self, index):
        return _VEU_Emulator.VEU_read_output_buffer(self, index)

    def read_csr(self, csr_addr):
        return _VEU_Emulator.VEU_read_csr(self, csr_addr)

    def write_csr(self, csr_addr, value):
        return _VEU_Emulator.VEU_write_csr(self, csr_addr, value)
    __swig_setmethods__["INPUT_BUFFER1_ADDR"] = _VEU_Emulator.VEU_INPUT_BUFFER1_ADDR_set
    __swig_getmethods__["INPUT_BUFFER1_ADDR"] = _VEU_Emulator.VEU_INPUT_BUFFER1_ADDR_get
    if _newclass:
        INPUT_BUFFER1_ADDR = _swig_property(_VEU_Emulator.VEU_INPUT_BUFFER1_ADDR_get, _VEU_Emulator.VEU_INPUT_BUFFER1_ADDR_set)
    __swig_setmethods__["INPUT_BUFFER2_ADDR"] = _VEU_Emulator.VEU_INPUT_BUFFER2_ADDR_set
    __swig_getmethods__["INPUT_BUFFER2_ADDR"] = _VEU_Emulator.VEU_INPUT_BUFFER2_ADDR_get
    if _newclass:
        INPUT_BUFFER2_ADDR = _swig_property(_VEU_Emulator.VEU_INPUT_BUFFER2_ADDR_get, _VEU_Emulator.VEU_INPUT_BUFFER2_ADDR_set)
    __swig_setmethods__["waddr_wstrb"] = _VEU_Emulator.VEU_waddr_wstrb_set
    __swig_getmethods__["waddr_wstrb"] = _VEU_Emulator.VEU_waddr_wstrb_get
    if _newclass:
        waddr_wstrb = _swig_property(_VEU_Emulator.VEU_waddr_wstrb_get, _VEU_Emulator.VEU_waddr_wstrb_set)
    __swig_setmethods__["slide_addr"] = _VEU_Emulator.VEU_slide_addr_set
    __swig_getmethods__["slide_addr"] = _VEU_Emulator.VEU_slide_addr_get
    if _newclass:
        slide_addr = _swig_property(_VEU_Emulator.VEU_slide_addr_get, _VEU_Emulator.VEU_slide_addr_set)
    __swig_setmethods__["psccu_mask"] = _VEU_Emulator.VEU_psccu_mask_set
    __swig_getmethods__["psccu_mask"] = _VEU_Emulator.VEU_psccu_mask_get
    if _newclass:
        psccu_mask = _swig_property(_VEU_Emulator.VEU_psccu_mask_get, _VEU_Emulator.VEU_psccu_mask_set)
    UP = _VEU_Emulator.VEU_UP
    DOWN = _VEU_Emulator.VEU_DOWN
    __swig_setmethods__["VEUSTATUS"] = _VEU_Emulator.VEU_VEUSTATUS_set
    __swig_getmethods__["VEUSTATUS"] = _VEU_Emulator.VEU_VEUSTATUS_get
    if _newclass:
        VEUSTATUS = _swig_property(_VEU_Emulator.VEU_VEUSTATUS_get, _VEU_Emulator.VEU_VEUSTATUS_set)
    __swig_setmethods__["VEURADDR1"] = _VEU_Emulator.VEU_VEURADDR1_set
    __swig_getmethods__["VEURADDR1"] = _VEU_Emulator.VEU_VEURADDR1_get
    if _newclass:
        VEURADDR1 = _swig_property(_VEU_Emulator.VEU_VEURADDR1_get, _VEU_Emulator.VEU_VEURADDR1_set)
    __swig_setmethods__["VEURADDR2"] = _VEU_Emulator.VEU_VEURADDR2_set
    __swig_getmethods__["VEURADDR2"] = _VEU_Emulator.VEU_VEURADDR2_get
    if _newclass:
        VEURADDR2 = _swig_property(_VEU_Emulator.VEU_VEURADDR2_get, _VEU_Emulator.VEU_VEURADDR2_set)
    __swig_setmethods__["VEUWADDR"] = _VEU_Emulator.VEU_VEUWADDR_set
    __swig_getmethods__["VEUWADDR"] = _VEU_Emulator.VEU_VEUWADDR_get
    if _newclass:
        VEUWADDR = _swig_property(_VEU_Emulator.VEU_VEUWADDR_get, _VEU_Emulator.VEU_VEUWADDR_set)
    __swig_setmethods__["VEUCFG"] = _VEU_Emulator.VEU_VEUCFG_set
    __swig_getmethods__["VEUCFG"] = _VEU_Emulator.VEU_VEUCFG_get
    if _newclass:
        VEUCFG = _swig_property(_VEU_Emulator.VEU_VEUCFG_get, _VEU_Emulator.VEU_VEUCFG_set)
    __swig_setmethods__["VEUVLEN"] = _VEU_Emulator.VEU_VEUVLEN_set
    __swig_getmethods__["VEUVLEN"] = _VEU_Emulator.VEU_VEUVLEN_get
    if _newclass:
        VEUVLEN = _swig_property(_VEU_Emulator.VEU_VEUVLEN_get, _VEU_Emulator.VEU_VEUVLEN_set)
    __swig_setmethods__["VEUMASK"] = _VEU_Emulator.VEU_VEUMASK_set
    __swig_getmethods__["VEUMASK"] = _VEU_Emulator.VEU_VEUMASK_get
    if _newclass:
        VEUMASK = _swig_property(_VEU_Emulator.VEU_VEUMASK_get, _VEU_Emulator.VEU_VEUMASK_set)
    __swig_setmethods__["VEUDEBUG"] = _VEU_Emulator.VEU_VEUDEBUG_set
    __swig_getmethods__["VEUDEBUG"] = _VEU_Emulator.VEU_VEUDEBUG_get
    if _newclass:
        VEUDEBUG = _swig_property(_VEU_Emulator.VEU_VEUDEBUG_get, _VEU_Emulator.VEU_VEUDEBUG_set)
VEU_swigregister = _VEU_Emulator.VEU_swigregister
VEU_swigregister(VEU)

# This file is compatible with both classic and new-style classes.


